; first exercise

(defun divisibleBy (x l)

 (if (= x 0)
  (return-from divisibleBy l))  ; if x = o then return the input

 (setq laux '()) 

 (doList (n l) ; loop input list

   (if (= n 0) ; if element = 0 then element belongs to result list
       (setq laux (cons n laux) )
     (if (= 0 (mod x n)) ; if x module n = 0, element belongs to result list
         (setq laux (cons n laux) )
       (if (= 0 (mod n x)) ; if n module x = 0, element belongs to result list
           (setq laux (cons n laux) )))
     )
            
 )

 (return-from divisibleBy (reverse laux)) ; reverse result

)

(print (divisibleBy 10 '(4 30 11 5 0)))
(print (divisibleBy 6 '(2 6 1 9 18) ))

; second exercise

; get elements from list and sublits and return a new list with all the elements
; for example: '(a (b c) (c b) a) => '(a b c c b a)
(defun getListPlain (l1 l2)

 (doList (n l1)

   (if (listp n)
     (setq l2 (getListPlain n l2))
     (setq l2 (cons n l2))
   )
 )
 (return-from getListPlain l2)
)

; get reverse list to validate symmetrical structure
(defun rev (l)
           (cond
             ((null l) '())
             (T 
              (if (listp (car l)) ; if the element is a list, we call rev recursively to reverse the sublist
                (append (rev (cdr l)) (list (rev (car l))))   
                (append (rev (cdr l)) (list (car l))))))) ; if not the element is returned

(defun isPalindrome (l)
 
  (setq laux (getListPlain l '())) ; call getListPlain to get the plain list
  
  (and (equal laux (reverse laux)) (equal (rev l) l)); compare list and its reverse. it also compares if the structue is symmetrical 
)

(print (isPalindrome '(a b a) ))
(print (isPalindrome  '(a (b c) (c b) a)))
(print (isPalindrome  '(a (b c) ((c) b) a)))
(print (isPalindrome '(a (b (c d)) ((c d) b) a ) )) 
(print (isPalindrome '( a (b () b) a)))
(print (isPalindrome '((a b) a (b a)) ))

; third exercise
(defun reverse-aux (x)
    (if (eq x '()) 
        '()
        (append (reverse-aux (rest x)) (list (car x)))))


(defvar l1 '(1 2 3 (5 6) ((7 (8)))))
(format t "original list: ~A~%" l1)
(format t "revert: ~A~%" (reverse-aux l1)) ; (((7 (8))) (5 6) 3 2 1)

(defvar l2 '())
(format t "original list: ~A~%" l2)
(format t "revert: ~A~%" (reverse-aux l2)) ; NIL

(defvar l3 '(1 2 3 (6) (9) 34 5))
(format t "original list: ~A~%" l3)
(format t "revert: ~A~%" (reverse-aux l3)) ; (5 34 (9) (6) 3 2 1)








